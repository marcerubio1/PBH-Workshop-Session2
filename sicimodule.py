import numpy as np


def Si(x):
    '''
    This function calculates: Si(x)=\int _{0}^{x}{\frac {\sin(t)}{t}}\,dt}
        
    The accuracy of this approximation is better than 10**(-16) for all x>=0
    
    Reference:
    GalSim: The modular galaxy image simulation toolkit
    B.T.P. Rowe et al.
    Astronomy and Computing
    Volume 10, April 2015, Pages 121-150
    https://www.sciencedirect.com/science/article/pii/S221313371500013X
    '''
    
    if x > 4:
    
        return np.pi/2 - __f(x)*np.cos(x) - __g(x)*np.sin(x)
    
    else:
        
        return __small_si(x)
        

def Ci(x):
    
    
    '''
    This function calculates Ci(x)= -\int _{x}^{\infty }{\frac {\cos t}{t}} dt
    where Ci is related with Cin through Ci(x)=\gamma +\ln x-Cin(x)
    
    The accuracy of this approximation is better than 10**(-16) for all x>=0
    
    Reference:
    GalSim: The modular galaxy image simulation toolkit
    B.T.P. Rowe et al.
    Astronomy and Computing
    Volume 10, April 2015, Pages 121-150
    https://www.sciencedirect.com/science/article/pii/S221313371500013X
    
    '''
    
    if x > 4:
        
        return __f(x)*np.sin(x) - __g(x)*np.cos(x)
    
    else:
        
        return __small_ci(x)

def __f(x):
    
    if x>4:
        
        p = 1 + 7.44437068161936700618*10**2*x**(-2) + 1.96396372895146869801*10**5*x**(-4) +             2.37750310125431834034*10**7*x**(-6) + 1.43073403821274636888*10**9*x**(-8) +             4.33736238870432522765*10**10*x**(-10) + 6.40533830574022022911*10**11*10**(-12) +             4.20968180571076940208*10**12*x**(-14) + 1.00795182980368574617*10**13*x**(-16) +             4.94816688199951963482*10**12*x**(-18) - 4.94701168645415959931*10**11*x**(-20)

        q = 1 + 7.46437068161927678031*10**2*x**(-2) + 1.97865247031583951450*10**5*x**(-4) +             2.41535670165126845144*10**7*x**(-6) + 1.47478952192985464958*10**9*x**(-8) +             4.58595115847765779830*10**10*x**(-10) + 7.08501308149515401563*10**11*x**(-12) +             5.06084464593475076774*10**12*x**(-14) + 1.43468549171581016479*10**13*x**(-16) +             1.11535493509914254097*10**13**(-18)

        return p/(x*q)
    
    else:
        
        return np.nan

def __g(x):
    
    if x>4:
    
        p = 1 + 8.1359520115168615*10*2*x**(-2) + 2.35239181626478200*10**5*x**(-4) +             3.12557570795778731*10**7*x**(-6) + 2.06297595146763354*10**9*x**(-8) +             6.83052205423625007*10**10*x**(-10) + 1.09049528450362786*10**12*x**(-12) +             7.57664583257834349*10**12*x**(-14) + 1.81004487464664575*10**13*x**(-16) +             6.43291613143049485*10**12*x**(-18) - 1.36517137670871689*10**12*x**(-20)

        q = 1 + 8.19595201151451564*10**2*x**(-2) + 2.40036752835578777*10**5*x**(-4) +             3.26026661647090822*10**7*x**(-6) + 2.23355543278099360*10**9*x**(-8) +             7.87465017341829930*10**10*x**(-10) + 1.39866710696414565*10**12**x**(-12) +             1.17164723371736605*10**13*x**(-14) + 4.01839087307656620*10**13*x**(-16) +             3.99653257887490811*10**13*x**(-18)
    
        return p/(x**2*q)

    else:
        
        return np.nan

def __small_si(x):
    
    p = 1 - 4.54393409816329991*10**(-2)*x**2 + 1.15457225751016682*10**(-3)*x**4 -         1.41018536821330254*10**(-5)*x**6 + 9.43280809438713025*10**(-8)*x**8 -         3.53201978997168357*10**(-10)*x**10 + 7.08240282274875911*10**(-13)*x**12 -         6.05338212010422477*10**(-16)*x**14
    
    q = 1 + 1.01162145739225565*10**(-2)*x**2 + 4.99175116169755106*10**(-5)*x**4 +         1.55654986308745614*10**(-7)*x**6 + 3.28067571055789734*10**(-10)*x**8 +         4.5049097575386581*10**(-13)*x**10 + 3.21107051193712168*10**(-16)*x**12
    
    return x*p/q

def __small_ci(x):
    
    gamma = 0.57721566490153286060651209008240243104215933593992
    
    p = -0.25 + 7.51851524438898291*10**(-3)*x**2 - 1.27528342240267686*10**(-4)*x**4 +         1.05297363846239184*10**(-6)*x**6 - 4.68889508144848019*10**(-9)*x**8 +         1.06480802891189243*10**(-11)*x**10 - 9.93728488857585407*10**(-15)*x**12
    
    q = 1 + 1.1592605689110735*10**(-2)*x**2 + 6.72126800814254432*10**(-5)*x**4 +         2.55533277086129636*10**(-7)*x**6 + 6.97071295760958946*10**(-10)*x**8 +         1.38536352772778619*10**(-12)*x**10 + 1.89106054713059759*10**(-15)*x**12 +         1.39759616731376855*10**(-18)*x**14
    
    return gamma + np.log(x) + x**2*p/q

